{
  "address": "0xD2df2f97E5C1a99F471414A1ea147Bae6481d8e6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "calAddressArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "calendar",
      "outputs": [
        {
          "internalType": "address",
          "name": "calendarOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calendarAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "calendarName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_calendarName",
          "type": "string"
        }
      ],
      "name": "createTelosCalendar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "calendarAddress",
          "type": "address"
        }
      ],
      "name": "getCalendar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCalendarAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcbeb64c4e1c636c9445d5f83815fdafa72484626d8a2479967d3b0f0c01d8da2",
  "receipt": {
    "to": null,
    "from": "0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964",
    "contractAddress": "0xD2df2f97E5C1a99F471414A1ea147Bae6481d8e6",
    "transactionIndex": 0,
    "gasUsed": "5324558",
    "logsBloom": "0x
    "blockHash": "0xca62b8942e75c0e63518391658303cd1b551ad0edffc77ce10e225bfee584895",
    "transactionHash": "0xcbeb64c4e1c636c9445d5f83815fdafa72484626d8a2479967d3b0f0c01d8da2",
    "logs": [],
    "blockNumber": 253819693,
    "cumulativeGasUsed": "5324558",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f36375f133d01b5cb13e5179fefc462e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calAddressArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"calendar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"calendarOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calendarAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"calendarName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_calendarName\",\"type\":\"string\"}],\"name\":\"createTelosCalendar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"calendarAddress\",\"type\":\"address\"}],\"name\":\"getCalendar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCalendarAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CalendarFactory.sol\":\"CalendarFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/CalendarDailyTelos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport './CalendarFactory.sol';\\r\\n\\r\\n\\r\\ncontract CalendarDailyTelos is AccessControl {\\r\\n    \\r\\n    string public calendarName;\\r\\n    address public calendarOwner;\\r\\n    \\r\\n    CalendarFactory private _factory;\\r\\n    \\r\\n    bytes32 public constant MEMBER_ROLE = keccak256(\\\"MEMBER_ROLE\\\");\\r\\n    bytes32 public constant GUEST_ROLE = keccak256(\\\"GUEST_ROLE\\\");\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    \\r\\n    address[] public users; \\r\\n    address[] public eventCreators;\\r\\n    \\r\\n    uint public totalEvents; \\r\\n    uint public adminCount;\\r\\n    uint public memberCount; \\r\\n    uint public guestCount;\\r\\n    \\r\\n    mapping(address => uint) public eventCount; \\r\\n    mapping(address => Invitation) public userInvitations;\\r\\n    mapping(address => Guest) public guests;\\r\\n    mapping(address => Member) public members;\\r\\n    mapping(address => Admin) public admins;\\r\\n    mapping(uint => CalendarEvent) public eventsById;\\r\\n    mapping(address => CalendarEvent[]) public userEvents;\\r\\n    mapping(address => CalendarEvent[]) public guestEvents;\\r\\n    mapping(address => CalendarEvent[]) public adminEvents;\\r\\n    mapping(address => CalendarEvent[]) public memberEvents; \\r\\n    mapping(uint => address[]) public eventInvitations; \\r\\n    \\r\\n    event NewEventCreated(uint indexed eventID, string title, address indexed organizer, uint startTime, uint endTime, string metadataURI, uint timestamp, bytes32 role);\\r\\n    \\r\\n    struct CalendarEvent {\\r\\n        uint eventId; \\r\\n        string title; \\r\\n        string description;\\r\\n        address organizer; \\r\\n        uint startTime;\\r\\n        uint endTime;\\r\\n        uint created; \\r\\n        string metadataURI; \\r\\n        address[] invitedAttendees; \\r\\n        address[] confirmedAttendees; \\r\\n    }\\r\\n\\r\\n    struct Admin {\\r\\n        address addr;\\r\\n        uint[] eventIds;\\r\\n    }\\r\\n   \\r\\n    struct Member {\\r\\n        address addr;\\r\\n        uint[] eventIds;\\r\\n    }\\r\\n\\r\\n    struct Guest {\\r\\n        address addr;\\r\\n        uint[] eventIds;\\r\\n    }\\r\\n\\r\\n    struct Invitation {\\r\\n          address userAddress;\\r\\n          uint[] eventIDs;\\r\\n    }\\r\\n\\r\\n    \\r\\n   constructor(string memory _calendarName) {\\r\\n        calendarName = _calendarName;\\r\\n        _factory = CalendarFactory(msg.sender);\\r\\n        calendarOwner = msg.sender;\\r\\n        _setupRole(ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMember() {\\r\\n        require(hasRole(MEMBER_ROLE, msg.sender), \\\"Caller is not a member\\\");\\r\\n        _;\\r\\n    } \\r\\n\\r\\n    function revokeRole(bytes32 role, address account) public override onlyAdmin {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        super.revokeRole(role, account);\\r\\n        if (!hasRole(ADMIN_ROLE, account) && hasRole(MEMBER_ROLE, account)) {\\r\\n            revokeRole(MEMBER_ROLE, account);\\r\\n            delete members[account];\\r\\n            memberCount--;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function grantRole(bytes32 role, address account) public override onlyAdmin {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        super.grantRole(role, account);\\r\\n        if (role == MEMBER_ROLE) {\\r\\n            members[account] = Member({\\r\\n                addr: account,\\r\\n                eventIds: new uint[](0)\\r\\n            });\\r\\n            memberCount++;\\r\\n        } else if (role == GUEST_ROLE) {\\r\\n            guestCount++;\\r\\n        } \\r\\n    }\\r\\n\\r\\n    function addMember(address memberAddress) public onlyAdmin {\\r\\n        _setupRole(MEMBER_ROLE, memberAddress);\\r\\n        members[memberAddress] = Member({\\r\\n            addr: memberAddress,\\r\\n            eventIds: new uint[](0)\\r\\n        });\\r\\n        memberCount++;\\r\\n        if (!hasRole(GUEST_ROLE, memberAddress)) {\\r\\n            _setupRole(GUEST_ROLE, memberAddress);\\r\\n            guests[memberAddress] = Guest({\\r\\n                addr: memberAddress,\\r\\n                eventIds: new uint[](0)\\r\\n            });\\r\\n            guestCount++;\\r\\n        }\\r\\n        bool userExists = false;\\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (users[i] == memberAddress) {\\r\\n                userExists = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!userExists) {\\r\\n            users.push(memberAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addMembers(address[] memory memberAddresses) public onlyAdmin {\\r\\n    for (uint i = 0; i < memberAddresses.length; i++) {\\r\\n        address memberAddress = memberAddresses[i];\\r\\n        _setupRole(MEMBER_ROLE, memberAddress);\\r\\n        members[memberAddress] = Member({\\r\\n            addr: memberAddress,\\r\\n            eventIds: new uint[](0)\\r\\n        });\\r\\n        memberCount++;\\r\\n\\r\\n        if (!hasRole(GUEST_ROLE, memberAddress)) {\\r\\n            _setupRole(GUEST_ROLE, memberAddress);\\r\\n            guests[memberAddress] = Guest({\\r\\n                addr: memberAddress,\\r\\n                eventIds: new uint[](0)\\r\\n            });\\r\\n            guestCount++;\\r\\n        }\\r\\n\\r\\n        bool userExists = false;\\r\\n        for (uint j = 0; j < users.length; j++) {\\r\\n            if (users[j] == memberAddress) {\\r\\n                userExists = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!userExists) {\\r\\n            users.push(memberAddress);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n function addAdmins(address[] memory adminAddresses) public onlyAdmin {\\r\\n    for (uint i = 0; i < adminAddresses.length; i++) {\\r\\n        address adminAddress = adminAddresses[i];\\r\\n        _setupRole(ADMIN_ROLE, adminAddress);\\r\\n        admins[adminAddress] = Admin({\\r\\n            addr: adminAddress,\\r\\n            eventIds: new uint[](0)\\r\\n        });\\r\\n        adminCount++;\\r\\n\\r\\n        if (!hasRole(MEMBER_ROLE, adminAddress)) {\\r\\n            _setupRole(MEMBER_ROLE, adminAddress);\\r\\n            members[adminAddress] = Member({\\r\\n                addr: adminAddress,\\r\\n                eventIds: new uint[](0)\\r\\n            });\\r\\n            memberCount++;\\r\\n        }\\r\\n\\r\\n        bool userExists = false;\\r\\n        for (uint j = 0; j < users.length; j++) {\\r\\n            if (users[j] == adminAddress) {\\r\\n                userExists = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!userExists) {\\r\\n            users.push(adminAddress);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n    function addGuest(address guestAddress) public {\\r\\n        _setupRole(GUEST_ROLE, guestAddress);\\r\\n        guests[guestAddress] = Guest({\\r\\n            addr: guestAddress,\\r\\n            eventIds: new uint[](0)\\r\\n        });\\r\\n        guestCount++;\\r\\n        bool userExists = false;\\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (users[i] == guestAddress) {\\r\\n                userExists = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!userExists) {\\r\\n            users.push(guestAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeMember(address memberAddress) public onlyAdmin {\\r\\n        revokeRole(MEMBER_ROLE, memberAddress);\\r\\n        delete members[memberAddress];\\r\\n        memberCount--;\\r\\n    }\\r\\n\\r\\n   function getEventById(uint eventId) public view returns (CalendarEvent memory) {\\r\\n    for (uint i = 0; i < eventCreators.length; i++) {\\r\\n        CalendarEvent[] storage events;\\r\\n        if (hasRole(MEMBER_ROLE, eventCreators[i])) {\\r\\n            events = memberEvents[eventCreators[i]];\\r\\n        } else if (hasRole(GUEST_ROLE, eventCreators[i])) {\\r\\n            events = guestEvents[eventCreators[i]];\\r\\n        } else if (hasRole(ADMIN_ROLE, eventCreators[i])) {\\r\\n            events = adminEvents[eventCreators[i]];\\r\\n        } else {\\r\\n            continue;\\r\\n        }\\r\\n        for (uint j = 0; j < events.length; j++) {\\r\\n            if (events[j].eventId == eventId) {\\r\\n                return events[j];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    revert(\\\"Event not found\\\");\\r\\n}\\r\\n\\r\\n    function getAdminEvents(address adminAddress) public view onlyAdmin returns (CalendarEvent[] memory) {\\r\\n        return adminEvents[adminAddress];\\r\\n    }\\r\\n\\r\\n    function getMemberEvents(address memberAddress) public view onlyMember returns (CalendarEvent[] memory) {\\r\\n        return memberEvents[memberAddress];\\r\\n    }\\r\\n\\r\\n    function getGuestEvents(address guestAddress) public view returns (CalendarEvent[] memory) {\\r\\n        require(hasRole(GUEST_ROLE, guestAddress), \\\"Caller is not a guest\\\");\\r\\n        return guestEvents[guestAddress];\\r\\n    }\\r\\n\\r\\n    function getAllEvents() public view returns (CalendarEvent[] memory) {\\r\\n        CalendarEvent[] memory memberEventsData = getAllMemberEvents();\\r\\n        CalendarEvent[] memory guestEventsData = getAllGuestEvents();\\r\\n        CalendarEvent[] memory adminEventsData = getAllAdminEvents();\\r\\n        uint combinedTotalEvents = memberEventsData.length + guestEventsData.length + adminEventsData.length;\\r\\n        CalendarEvent[] memory allEvents = new CalendarEvent[](combinedTotalEvents);\\r\\n        uint currentIndex = 0;\\r\\n        for (uint i = 0; i < memberEventsData.length; i++) {\\r\\n            allEvents[currentIndex] = memberEventsData[i];\\r\\n            currentIndex++;\\r\\n        }\\r\\n        for (uint i = 0; i < guestEventsData.length; i++) {\\r\\n            allEvents[currentIndex] = guestEventsData[i];\\r\\n            currentIndex++;\\r\\n        }\\r\\n        for (uint i = 0; i < adminEventsData.length; i++) {\\r\\n            allEvents[currentIndex] = adminEventsData[i];\\r\\n            currentIndex++;\\r\\n        }\\r\\n        return allEvents;\\r\\n    }\\r\\n\\r\\n     function getAllMemberEvents() public view returns (CalendarEvent[] memory) {\\r\\n        address[] memory memberAddresses = new address[](users.length);\\r\\n        uint memberCountLocal = 0; \\r\\n        uint totalMemberEvents = 0; \\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (hasRole(MEMBER_ROLE, users[i])) {\\r\\n                memberAddresses[memberCountLocal] = users[i];\\r\\n                memberCountLocal++;\\r\\n            totalMemberEvents += memberEvents[users[i]].length;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    CalendarEvent[] memory allMemberEvents = new CalendarEvent[](totalMemberEvents);\\r\\n    uint currentIndex = 0;\\r\\n    for (uint i = 0; i < memberCountLocal; i++) {\\r\\n        for (uint j = 0; j < memberEvents[memberAddresses[i]].length; j++) {\\r\\n            allMemberEvents[currentIndex] = memberEvents[memberAddresses[i]][j];\\r\\n            currentIndex++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return allMemberEvents;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n   function getAllGuestEvents() public view returns (CalendarEvent[] memory) {\\r\\n    uint totalGuestEvents = 0;\\r\\n    address[] memory guestAddresses = new address[](users.length);\\r\\n    uint guestCountLocal = 0; \\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (hasRole(GUEST_ROLE, users[i])) {\\r\\n                guestAddresses[guestCountLocal] = users[i];\\r\\n                guestCountLocal++;\\r\\n                totalGuestEvents += guestEvents[users[i]].length;\\r\\n            }\\r\\n        }\\r\\n        CalendarEvent[] memory allGuestEvents = new CalendarEvent[](totalGuestEvents);\\r\\n        uint currentIndex = 0;\\r\\n        for (uint i = 0; i < guestCountLocal; i++) {\\r\\n        for (uint j = 0; j < guestEvents[guestAddresses[i]].length; j++) {\\r\\n            allGuestEvents[currentIndex] = guestEvents[guestAddresses[i]][j];\\r\\n            currentIndex++;\\r\\n            }\\r\\n        }\\r\\n        return allGuestEvents;\\r\\n    }\\r\\n\\r\\n   function getAllAdminEvents() public view returns (CalendarEvent[] memory) {\\r\\n        uint totalAdminEvents = 0;\\r\\n        address[] memory adminAddresses = new address[](users.length);\\r\\n        uint adminCountLocal = 0; \\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (hasRole(ADMIN_ROLE, users[i])) {\\r\\n                adminAddresses[adminCountLocal] = users[i];\\r\\n                adminCountLocal++;\\r\\n                totalAdminEvents += adminEvents[users[i]].length;\\r\\n            }\\r\\n        }\\r\\n        CalendarEvent[] memory allAdminEvents = new CalendarEvent[](totalAdminEvents);\\r\\n        uint currentIndex = 0;\\r\\n        for (uint i = 0; i < adminCountLocal; i++) {\\r\\n        for (uint j = 0; j < adminEvents[adminAddresses[i]].length; j++) {\\r\\n            allAdminEvents[currentIndex] = adminEvents[adminAddresses[i]][j];\\r\\n            currentIndex++;\\r\\n            }\\r\\n        }\\r\\n        return allAdminEvents;\\r\\n    }\\r\\n\\r\\n\\r\\n    function addInvitation(address userAddress, uint eventID) internal {\\r\\n        Invitation storage invitation = userInvitations[userAddress];\\r\\n        invitation.userAddress = userAddress;\\r\\n        invitation.eventIDs.push(eventID);\\r\\n    }\\r\\n\\r\\n    function getInvitations(address userAddress) public view returns (uint[] memory) {\\r\\n        Invitation storage invitation = userInvitations[userAddress];\\r\\n        return invitation.eventIDs;\\r\\n    }\\r\\n    \\r\\n    function includes(address[] memory array, address element) internal pure returns (bool) {\\r\\n        for (uint i = 0; i < array.length; i++) {\\r\\n        if (array[i] == element) {\\r\\n            return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n\\r\\n    function acceptInvitation(uint eventID) public {\\r\\n    require(hasRole(MEMBER_ROLE, msg.sender) || hasRole(ADMIN_ROLE, msg.sender), \\\"Only members or admins can accept invitations\\\");\\r\\n    uint[] memory invitedEvents = getInvitations(msg.sender);\\r\\n    bool isInvited = false;\\r\\n    for (uint i = 0; i < invitedEvents.length; i++) {\\r\\n        if (invitedEvents[i] == eventID) {\\r\\n            isInvited = true;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    require(isInvited, \\\"You are not invited to this event\\\");\\r\\n    CalendarEvent storage calendarEvent = eventsById[eventID];\\r\\n    calendarEvent.confirmedAttendees.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    function updateEvent(uint eventID, string memory title, uint startTime, uint endTime, string memory metadataURI) public {\\r\\n        require(hasRole(GUEST_ROLE, msg.sender) || hasRole(MEMBER_ROLE, msg.sender) || hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not a user, member or admin\\\");\\r\\n        if (hasRole(GUEST_ROLE, msg.sender)) {\\r\\n            require(eventID < userEvents[msg.sender].length, \\\"Invalid event ID\\\");\\r\\n            CalendarEvent storage eventToUpdate = userEvents[msg.sender][eventID];\\r\\n            eventToUpdate.title = title;\\r\\n            eventToUpdate.startTime = startTime;\\r\\n            eventToUpdate.endTime = endTime;\\r\\n            eventToUpdate.metadataURI = metadataURI;\\r\\n        } else if (hasRole(MEMBER_ROLE, msg.sender) || hasRole(ADMIN_ROLE, msg.sender)) {\\r\\n            require(eventID < memberEvents[msg.sender].length, \\\"Invalid event ID\\\");\\r\\n            CalendarEvent storage eventToUpdate = memberEvents[msg.sender][eventID];\\r\\n            eventToUpdate.title = title;\\r\\n            eventToUpdate.startTime = startTime;\\r\\n            eventToUpdate.endTime = endTime;\\r\\n            eventToUpdate.metadataURI = metadataURI;\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n   \\r\\n\\r\\n    function getAllMemberAddresses() public view returns (address[] memory) {\\r\\n        address[] memory memberAddresses = new address[](memberCount);\\r\\n        uint currentIndex = 0;\\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (hasRole(MEMBER_ROLE, users[i])) {\\r\\n                memberAddresses[currentIndex] = users[i];\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n        return memberAddresses;\\r\\n    }\\r\\n\\r\\n    function getAllGuestAddresses() public view returns (address[] memory) {\\r\\n        address[] memory guestAddresses = new address[](guestCount);\\r\\n        uint currentIndex = 0;\\r\\n            for (uint i = 0; i < users.length; i++) {\\r\\n            if (hasRole(GUEST_ROLE, users[i])) {\\r\\n                guestAddresses[currentIndex] = users[i];\\r\\n                currentIndex++;\\r\\n                }\\r\\n            }\\r\\n            return guestAddresses;\\r\\n    }\\r\\n\\r\\n    function createEvent(string memory title,string memory description,  uint startTime, uint endTime, string memory metadataURI, address[] memory invitees) public {\\r\\n    require(bytes(title).length > 0, \\\"Event title must not be empty\\\");\\r\\n    require(startTime < endTime, \\\"Invalid event times\\\");\\r\\n        if (!hasRole(MEMBER_ROLE, msg.sender) && !hasRole(ADMIN_ROLE, msg.sender) && !hasRole(GUEST_ROLE, msg.sender)) {\\r\\n            addGuest(msg.sender);\\r\\n            guestCount++;\\r\\n        }\\r\\n        CalendarEvent memory newEvent;\\r\\n        newEvent.eventId = totalEvents + 1;\\r\\n        newEvent.title = title;\\r\\n        newEvent.description = description;\\r\\n        newEvent.startTime = startTime;\\r\\n        newEvent.endTime = endTime;\\r\\n        newEvent.organizer = msg.sender;\\r\\n        newEvent.created = block.timestamp;\\r\\n        newEvent.metadataURI = metadataURI;\\r\\n        newEvent.invitedAttendees = invitees;\\r\\n        newEvent.confirmedAttendees = new address[](0);\\r\\n        if (hasRole(MEMBER_ROLE, msg.sender) || hasRole(ADMIN_ROLE, msg.sender)) {\\r\\n            memberEvents[msg.sender].push(newEvent);\\r\\n            members[msg.sender].eventIds.push(newEvent.eventId);\\r\\n        } else {\\r\\n            userEvents[msg.sender].push(newEvent);\\r\\n            guestEvents[msg.sender].push(newEvent);\\r\\n            guests[msg.sender].eventIds.push(newEvent.eventId);\\r\\n        }\\r\\n        uint eventID = newEvent.eventId;\\r\\n        totalEvents++;\\r\\n        eventCreators.push(msg.sender);\\r\\n        for (uint i = 0; i < invitees.length; i++) {\\r\\n        address invitee = invitees[i];\\r\\n        eventInvitations[eventID].push(invitee);\\r\\n        addInvitation(invitee, eventID);\\r\\n        }\\r\\n        bytes32 userRole = MEMBER_ROLE;\\r\\n        if (hasRole(ADMIN_ROLE, msg.sender)) {\\r\\n        userRole = ADMIN_ROLE;\\r\\n        } else if (hasRole(GUEST_ROLE, msg.sender)) {\\r\\n        userRole = GUEST_ROLE;\\r\\n        }\\r\\n        emit NewEventCreated(eventID, title, msg.sender, startTime, endTime, metadataURI, block.timestamp, userRole);\\r\\n    }   \\r\\n\\r\\n    function deleteEvent(uint eventID) public {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not a admin\\\");\\r\\n        if (hasRole(ADMIN_ROLE, msg.sender)) {\\r\\n            require(eventID < memberEvents[msg.sender].length, \\\"Invalid event ID\\\");\\r\\n            CalendarEvent[] storage events = memberEvents[msg.sender];\\r\\n                        delete events[eventID];\\r\\n        } \\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9b9cc0147d1b05be2dc507526e27e71ed8d415ea136bb6eeb94c2385bdb17961\",\"license\":\"MIT\"},\"contracts/CalendarFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"./CalendarDailyTelos.sol\\\";\\r\\n\\r\\ncontract CalendarFactory {\\r\\n    address[] public calAddressArray;\\r\\n    address public factoryOwner;\\r\\n    mapping(address => Calendar) public calendar;\\r\\n\\r\\n    struct Calendar {\\r\\n        address calendarOwner;\\r\\n        address calendarAddress;\\r\\n        string calendarName;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        factoryOwner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyfactoryOwner() {\\r\\n        require(msg.sender == factoryOwner, 'Only the contract factoryOwner may call this function');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function createTelosCalendar(string memory _calendarName) public {\\r\\n        CalendarDailyTelos tc = new CalendarDailyTelos(_calendarName);\\r\\n        calAddressArray.push(address(tc));\\r\\n        calendar[address(tc)] = Calendar(msg.sender, address(tc), _calendarName);\\r\\n    }\\r\\n\\r\\n    function getCalendarAddresses() public view returns(address[] memory) {\\r\\n        return calAddressArray;\\r\\n    }\\r\\n\\r\\n    function getCalendar(address calendarAddress) public view returns (address, address, string memory) {\\r\\n        Calendar memory calendarOwner = calendar[calendarAddress];\\r\\n        return (calendarOwner.calendarOwner, calendarOwner.calendarAddress, calendarOwner.calendarName);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x49910a325ad210b9e84436ecb3b084c01afbcd0593a37075d970b4645c9f66a1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c80631eaf7b25146200006f5780633717366c14620000a057806337586c6414620000d05780634273601c14620000e9578063aa949da314620000fd578063b2c1312f1462000114575b600080fd5b620000866200008036600462000478565b6200012d565b6040516200009793929190620004f2565b60405180910390f35b620000b7620000b136600462000529565b620001ef565b6040516001600160a01b03909116815260200162000097565b620000da6200021a565b60405162000097919062000543565b600154620000b7906001600160a01b031681565b620000866200010e36600462000478565b6200027e565b6200012b62000125366004620005a8565b6200037b565b005b60026020819052600091825260409091208054600182015492820180546001600160a01b03928316949092169291620001669062000662565b80601f0160208091040260200160405190810160405280929190818152602001828054620001949062000662565b8015620001e55780601f10620001b957610100808354040283529160200191620001e5565b820191906000526020600020905b815481529060010190602001808311620001c757829003601f168201915b5050505050905083565b600081815481106200020057600080fd5b6000918252602090912001546001600160a01b0316905081565b606060008054806020026020016040519081016040528092919081815260200182805480156200027457602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000255575b5050505050905090565b6001600160a01b0380821660009081526002602081815260408084208151606081810184528254881682526001830154909716938101939093529283018054949586959094869493909290840191620002d79062000662565b80601f0160208091040260200160405190810160405280929190818152602001828054620003059062000662565b8015620003565780601f106200032a5761010080835404028352916020019162000356565b820191906000526020600020905b8154815290600101906020018083116200033857829003601f168201915b5050509190925250508151602083015160409093015190989297509550909350505050565b6000816040516200038c906200046a565b6200039891906200069e565b604051809103906000f080158015620003b5573d6000803e3d6000fd5b5060008054600180820183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b03199081166001600160a01b038681169182179093556040805160608101825233815260208082018481528284018c8152948952600291829052929097208151815486169087161781559151958201805490941695909416949094179091555193945092909182019062000463908262000706565b5050505050565b6156f280620007d383390190565b6000602082840312156200048b57600080fd5b81356001600160a01b0381168114620004a357600080fd5b9392505050565b6000815180845260005b81811015620004d257602081850181015186830182015201620004b4565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038481168252831660208201526060604082018190526000906200052090830184620004aa565b95945050505050565b6000602082840312156200053c57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015620005865783516001600160a01b0316835292840192918401916001016200055f565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215620005bb57600080fd5b81356001600160401b0380821115620005d357600080fd5b818401915084601f830112620005e857600080fd5b813581811115620005fd57620005fd62000592565b604051601f8201601f19908116603f0116810190838211818310171562000628576200062862000592565b816040528281528760208487010111156200064257600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c908216806200067757607f821691505b6020821081036200069857634e487b7160e01b600052602260045260246000fd5b50919050565b602081526000620004a36020830184620004aa565b601f8211156200070157600081815260208120601f850160051c81016020861015620006dc5750805b601f850160051c820191505b81811015620006fd57828155600101620006e8565b5050505b505050565b81516001600160401b0381111562000722576200072262000592565b6200073a8162000733845462000662565b84620006b3565b602080601f831160018114620007725760008415620007595750858301515b600019600386901b1c1916600185901b178555620006fd565b600085815260208120601f198616915b82811015620007a35788860151825594840194600190910190840162000782565b5085821015620007c25787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe60806040523480156200001157600080fd5b50604051620056f2380380620056f283398101604081905262000034916200015e565b6001620000428282620002c2565b5060038054336001600160a01b03199182168117909255600280549091168217905562000091907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759062000098565b506200038e565b620000a48282620000a8565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000a4576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001043390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200017257600080fd5b82516001600160401b03808211156200018a57600080fd5b818501915085601f8301126200019f57600080fd5b815181811115620001b457620001b462000148565b604051601f8201601f19908116603f01168101908382118183101715620001df57620001df62000148565b816040528281528886848701011115620001f857600080fd5b600093505b828410156200021c5784840186015181850187015292850192620001fd565b600086848301015280965050505050505092915050565b600181811c908216806200024857607f821691505b6020821081036200026957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002bd57600081815260208120601f850160051c81016020861015620002985750805b601f850160051c820191505b81811015620002b957828155600101620002a4565b5050505b505050565b81516001600160401b03811115620002de57620002de62000148565b620002f681620002ef845462000233565b846200026f565b602080601f8311600181146200032e5760008415620003155750858301515b600019600386901b1c1916600185901b178555620002b9565b600085815260208120601f198616915b828110156200035f578886015182559484019460019091019084016200033e565b50858210156200037e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b615354806200039e6000396000f3fe608060405234801561001057600080fd5b506004361061023a5760003560e01c806203cf841461023f57806301ffc9a71461026f57806308ae4b0c146102925780630b1ca49a146102bb5780630eda85ee146102d05780630f5c4a2b146102f9578063110cd1001461032057806311aee38014610340578063248a9ca314610357578063272420a41461036a578063286482f91461037d5780632b7832b3146103905780632f2ff15d146103995780632fd1949d146103ac57806336568abe146103c1578063365b98b2146103d4578063429b62e5146103e7578063455f20dc14610410578063464c5b6c146104305780635136f358146104435780635c7e8863146104565780635e0e28041461046b57806369ca75fc1461047e5780636d7524ee146104865780636dc4c2af146104995780636f4d469b146104ac57806375b238fc146104bf57806378b2250f146104d45780638c5f2408146104dd57806391d14854146104f257806395fa6c50146105055780639c54df6414610518578063a0cb13331461052b578063a10f469e14610533578063a217fddf14610548578063b98079bc14610550578063ba87068614610570578063bdfc989314610579578063c1ce869b1461058c578063c27a500d14610594578063ca6d56dc1461059c578063d547741f146105af578063d5dd1b50146105c2578063d98b88fa146105d5578063ef44b478146105f5578063ef7e1f6814610608578063f71f67f41461061b578063f8749a5814610623578063fc3d2e4614610636575b600080fd5b600254610252906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61028261027d366004614947565b61065f565b6040519015158152602001610266565b6102526102a0366004614988565b600d602052600090815260409020546001600160a01b031681565b6102ce6102c9366004614988565b610696565b005b6102526102de366004614988565b600c602052600090815260409020546001600160a01b031681565b61030c6103073660046149a3565b610739565b604051610266989796959493929190614a1d565b61033361032e366004614988565b610945565b6040516102669190614ba4565b61034960085481565b604051908152602001610266565b610349610365366004614c06565b610ca6565b6102ce610378366004614d5a565b610cbb565b61033361038b366004614988565b61134a565b61034960075481565b6102ce6103a7366004614e18565b6116c8565b6103b46117f8565b6040516102669190614e44565b6102ce6103cf366004614e18565b611917565b6102526103e2366004614c06565b611991565b6102526103f5366004614988565b600e602052600090815260409020546001600160a01b031681565b61034961041e366004614988565b600a6020526000908152604090205481565b6102ce61043e366004614c06565b6119bb565b6102ce610451366004614988565b611b35565b61034960008051602061529f83398151915281565b61030c6104793660046149a3565b611c6e565b6103b4611c8a565b61030c610494366004614c06565b611d87565b6102ce6104a7366004614e85565b611da9565b6102ce6104ba366004614f05565b611fda565b6103496000805160206152df83398151915281565b61034960095481565b6104e5612232565b6040516102669190614f41565b610282610500366004614e18565b6122c0565b610252610513366004614c06565b6122e9565b6102ce610526366004614f05565b6122f9565b610333612551565b6103496000805160206152ff83398151915281565b610349600081565b61056361055e366004614c06565b612ac7565b6040516102669190614f54565b61034960065481565b61030c6105873660046149a3565b612f59565b610333612f75565b6103336134e0565b6102ce6105aa366004614988565b6136b5565b6102ce6105bd366004614e18565b61388e565b61030c6105d03660046149a3565b61399b565b6105e86105e3366004614988565b6139b7565b6040516102669190614f67565b610333610603366004614988565b613a29565b610252610616366004614f9f565b613da6565b610333613dde565b6102ce610631366004614c06565b614349565b610252610644366004614988565b600b602052600090815260409020546001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061069057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106ae6000805160206152df833981519152336122c0565b6106d35760405162461bcd60e51b81526004016106ca90614fc1565b60405180910390fd5b6106eb6000805160206152ff8339815191528261388e565b6001600160a01b0381166000908152600d6020526040812080546001600160a01b03191681559061071f60018301826147e2565b50506008805490600061073183615007565b919050555050565b6013602052816000526040600020818154811061075557600080fd5b90600052602060002090600a02016000915091505080600001549080600101805461077f9061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546107ab9061501e565b80156107f85780601f106107cd576101008083540402835291602001916107f8565b820191906000526020600020905b8154815290600101906020018083116107db57829003601f168201915b50505050509080600201805461080d9061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546108399061501e565b80156108865780601f1061085b57610100808354040283529160200191610886565b820191906000526020600020905b81548152906001019060200180831161086957829003601f168201915b505050600384015460048501546005860154600687015460078801805497986001600160a01b039095169793965091945092916108c29061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546108ee9061501e565b801561093b5780601f106109105761010080835404028352916020019161093b565b820191906000526020600020905b81548152906001019060200180831161091e57829003601f168201915b5050505050905088565b606061095f6000805160206152df833981519152336122c0565b61097b5760405162461bcd60e51b81526004016106ca90614fc1565b6001600160a01b038216600090815260126020908152604080832080548251818502810185019093528083529193909284015b82821015610c9a57838290600052602060002090600a020160405180610140016040529081600082015481526020016001820180546109ec9061501e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a189061501e565b8015610a655780601f10610a3a57610100808354040283529160200191610a65565b820191906000526020600020905b815481529060010190602001808311610a4857829003601f168201915b50505050508152602001600282018054610a7e9061501e565b80601f0160208091040260200160405190810160405280929190818152602001828054610aaa9061501e565b8015610af75780601f10610acc57610100808354040283529160200191610af7565b820191906000526020600020905b815481529060010190602001808311610ada57829003601f168201915b505050918352505060038201546001600160a01b0316602082015260048201546040820152600582015460608201526006820154608082015260078201805460a090920191610b459061501e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b719061501e565b8015610bbe5780601f10610b9357610100808354040283529160200191610bbe565b820191906000526020600020905b815481529060010190602001808311610ba157829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015610c2057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c02575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015610c8257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c64575b505050505081525050815260200190600101906109ae565b5050505090505b919050565b60009081526020819052604090206001015490565b6000865111610d0c5760405162461bcd60e51b815260206004820152601d60248201527f4576656e74207469746c65206d757374206e6f7420626520656d70747900000060448201526064016106ca565b828410610d515760405162461bcd60e51b8152602060048201526013602482015272496e76616c6964206576656e742074696d657360681b60448201526064016106ca565b610d696000805160206152ff833981519152336122c0565b158015610d8b5750610d896000805160206152df833981519152336122c0565b155b8015610dac5750610daa60008051602061529f833981519152336122c0565b155b15610dd057610dba33611b35565b60098054906000610dca83615058565b91905055505b610dd8614800565b600654610de6906001615071565b8152602080820188905260408083018890526080830187905260a083018690523360608401524260c084015260e083018590526101008301849052805160008082529281019091529050610120820152610e4e6000805160206152ff833981519152336122c0565b80610e6c5750610e6c6000805160206152df833981519152336122c0565b15610f8a573360009081526013602090815260408220805460018181018355918452928290208451600a9094020192835590830151839291820190610eb190826150d2565b5060408201516002820190610ec690826150d2565b5060608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a0820151600582015560c0820151600682015560e08201516007820190610f1f90826150d2565b506101008201518051610f3c91600884019160209091019061485c565b506101208201518051610f5991600984019160209091019061485c565b5050336000908152600d6020908152604082208451600191820180549283018155845291909220909101555061118a565b3360009081526010602090815260408220805460018181018355918452928290208451600a9094020192835590830151839291820190610fca90826150d2565b5060408201516002820190610fdf90826150d2565b5060608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782019061103890826150d2565b50610100820151805161105591600884019160209091019061485c565b50610120820151805161107291600984019160209091019061485c565b50503360009081526011602090815260408220805460018181018355918452928290208551600a9094020192835590840151849350908201906110b590826150d2565b50604082015160028201906110ca90826150d2565b5060608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782019061112390826150d2565b50610100820151805161114091600884019160209091019061485c565b50610120820151805161115d91600984019160209091019061485c565b5050336000908152600c602090815260408220845160019182018054928301815584529190922090910155505b80516006805490600061119c83615058565b90915550506005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b031916331790555b835181101561128357600084828151811061120057611200615191565b60209081029190910181015160008581526014835260408082208054600180820183559184528584200180546001600160a01b0386166001600160a01b03199182168117909255818552600b875292842080549093161782559081018054918201815582529290209091018490559050508061127b81615058565b9150506111e3565b506000805160206152ff8339815191526112ab6000805160206152df833981519152336122c0565b156112c557506000805160206152df8339815191526112f3565b6112dd60008051602061529f833981519152336122c0565b156112f3575060008051602061529f8339815191525b336001600160a01b0316827fb0cd684d8e2468fcd73b7ad59b2b57f99cc49f0a2f66ea314ecc7da59c83b8378b8a8a8a4288604051611337969594939291906151a7565b60405180910390a3505050505050505050565b60606113646000805160206152ff833981519152336122c0565b6113a95760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba10309036b2b6b132b960511b60448201526064016106ca565b6001600160a01b038216600090815260136020908152604080832080548251818502810185019093528083529193909284015b82821015610c9a57838290600052602060002090600a0201604051806101400160405290816000820154815260200160018201805461141a9061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546114469061501e565b80156114935780601f1061146857610100808354040283529160200191611493565b820191906000526020600020905b81548152906001019060200180831161147657829003601f168201915b505050505081526020016002820180546114ac9061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546114d89061501e565b80156115255780601f106114fa57610100808354040283529160200191611525565b820191906000526020600020905b81548152906001019060200180831161150857829003601f168201915b505050918352505060038201546001600160a01b0316602082015260048201546040820152600582015460608201526006820154608082015260078201805460a0909201916115739061501e565b80601f016020809104026020016040519081016040528092919081815260200182805461159f9061501e565b80156115ec5780601f106115c1576101008083540402835291602001916115ec565b820191906000526020600020905b8154815290600101906020018083116115cf57829003601f168201915b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561164e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611630575b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156116b057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611692575b505050505081525050815260200190600101906113dc565b6116e06000805160206152df833981519152336122c0565b6116fc5760405162461bcd60e51b81526004016106ca90614fc1565b6117146000805160206152df833981519152336122c0565b6117305760405162461bcd60e51b81526004016106ca90614fc1565b61173a828261449b565b6000805160206152ff83398151915282036117cf576040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600d835294909420835181546001600160a01b031916931692909217825592518051929391926117b392600185019201906148c1565b505060088054915060006117c683615058565b91905055505050565b60008051602061529f83398151915282036117f457600980549060006117c683615058565b5050565b606060006008546001600160401b0381111561181657611816614c1f565b60405190808252806020026020018201604052801561183f578160200160208202803683370190505b5090506000805b60045481101561190f5761188f6000805160206152ff8339815191526004838154811061187557611875615191565b6000918252602090912001546001600160a01b03166122c0565b156118fd57600481815481106118a7576118a7615191565b9060005260206000200160009054906101000a90046001600160a01b03168383815181106118d7576118d7615191565b6001600160a01b0390921660209283029190910190910152816118f981615058565b9250505b8061190781615058565b915050611846565b509092915050565b6001600160a01b03811633146119875760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106ca565b6117f482826144bc565b600481815481106119a157600080fd5b6000918252602090912001546001600160a01b0316905081565b6119d36000805160206152ff833981519152336122c0565b806119f157506119f16000805160206152df833981519152336122c0565b611a535760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79206d656d62657273206f722061646d696e732063616e20616363657060448201526c7420696e7669746174696f6e7360981b60648201526084016106ca565b6000611a5e336139b7565b90506000805b8251811015611aa85783838281518110611a8057611a80615191565b602002602001015103611a965760019150611aa8565b80611aa081615058565b915050611a64565b5080611b005760405162461bcd60e51b815260206004820152602160248201527f596f7520617265206e6f7420696e766974656420746f2074686973206576656e6044820152601d60fa1b60648201526084016106ca565b50506000908152600f602090815260408220600901805460018101825590835291200180546001600160a01b03191633179055565b611b4d60008051602061529f83398151915282614521565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600c835294909420835181546001600160a01b03191693169290921782559251805192939192611bb192600185019201906148c1565b50506009805491506000611bc483615058565b91905055506000805b600454811015611c2957826001600160a01b031660048281548110611bf457611bf4615191565b6000918252602090912001546001600160a01b031603611c175760019150611c29565b80611c2181615058565b915050611bcd565b50806117f457600480546001810182556000919091526000805160206152bf8339815191520180546001600160a01b0384166001600160a01b03199091161790555050565b6011602052816000526040600020818154811061075557600080fd5b606060006009546001600160401b03811115611ca857611ca8614c1f565b604051908082528060200260200182016040528015611cd1578160200160208202803683370190505b5090506000805b60045481101561190f57611d0760008051602061529f8339815191526004838154811061187557611875615191565b15611d755760048181548110611d1f57611d1f615191565b9060005260206000200160009054906101000a90046001600160a01b0316838381518110611d4f57611d4f615191565b6001600160a01b039092166020928302919091019091015281611d7181615058565b9250505b80611d7f81615058565b915050611cd8565b600f602052600090815260409020805460018201805491929161077f9061501e565b611dc160008051602061529f833981519152336122c0565b80611ddf5750611ddf6000805160206152ff833981519152336122c0565b80611dfd5750611dfd6000805160206152df833981519152336122c0565b611e575760405162461bcd60e51b815260206004820152602560248201527f43616c6c6572206973206e6f74206120757365722c206d656d626572206f722060448201526430b236b4b760d91b60648201526084016106ca565b611e6f60008051602061529f833981519152336122c0565b15611f0857336000908152601060205260409020548510611ea25760405162461bcd60e51b81526004016106ca906151ee565b336000908152601060205260408120805487908110611ec357611ec3615191565b90600052602060002090600a0201905084816001019081611ee491906150d2565b50600481018490556005810183905560078101611f0183826150d2565b5050611fd3565b611f206000805160206152ff833981519152336122c0565b80611f3e5750611f3e6000805160206152df833981519152336122c0565b15611fd357336000908152601360205260409020548510611f715760405162461bcd60e51b81526004016106ca906151ee565b336000908152601360205260408120805487908110611f9257611f92615191565b90600052602060002090600a0201905084816001019081611fb391906150d2565b50600481018490556005810183905560078101611fd083826150d2565b50505b5050505050565b611ff26000805160206152df833981519152336122c0565b61200e5760405162461bcd60e51b81526004016106ca90614fc1565b60005b81518110156117f457600082828151811061202e5761202e615191565b602002602001015190506120506000805160206152ff83398151915282614521565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600d835294909420835181546001600160a01b031916931692909217825592518051929391926120b492600185019201906148c1565b505060088054915060006120c783615058565b91905055506120e460008051602061529f833981519152826122c0565b61217d5761210060008051602061529f83398151915282614521565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600c835294909420835181546001600160a01b0319169316929092178255925180519293919261216492600185019201906148c1565b5050600980549150600061217783615058565b91905055505b6000805b6004548110156121dd57826001600160a01b0316600482815481106121a8576121a8615191565b6000918252602090912001546001600160a01b0316036121cb57600191506121dd565b806121d581615058565b915050612181565b508061221d57600480546001810182556000919091526000805160206152bf8339815191520180546001600160a01b0319166001600160a01b0384161790555b5050808061222a90615058565b915050612011565b6001805461223f9061501e565b80601f016020809104026020016040519081016040528092919081815260200182805461226b9061501e565b80156122b85780601f1061228d576101008083540402835291602001916122b8565b820191906000526020600020905b81548152906001019060200180831161229b57829003601f168201915b505050505081565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600581815481106119a157600080fd5b6123116000805160206152df833981519152336122c0565b61232d5760405162461bcd60e51b81526004016106ca90614fc1565b60005b81518110156117f457600082828151811061234d5761234d615191565b6020026020010151905061236f6000805160206152df83398151915282614521565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600e835294909420835181546001600160a01b031916931692909217825592518051929391926123d392600185019201906148c1565b505060078054915060006123e683615058565b91905055506124036000805160206152ff833981519152826122c0565b61249c5761241f6000805160206152ff83398151915282614521565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600d835294909420835181546001600160a01b0319169316929092178255925180519293919261248392600185019201906148c1565b5050600880549150600061249683615058565b91905055505b6000805b6004548110156124fc57826001600160a01b0316600482815481106124c7576124c7615191565b6000918252602090912001546001600160a01b0316036124ea57600191506124fc565b806124f481615058565b9150506124a0565b508061253c57600480546001810182556000919091526000805160206152bf8339815191520180546001600160a01b0319166001600160a01b0384161790555b5050808061254990615058565b915050612330565b60606000806004805490506001600160401b0381111561257357612573614c1f565b60405190808252806020026020018201604052801561259c578160200160208202803683370190505b5090506000805b60045481101561269a576125d260008051602061529f8339815191526004838154811061187557611875615191565b1561268857600481815481106125ea576125ea615191565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061261a5761261a615191565b6001600160a01b03909216602092830291909101909101528161263c81615058565b925050601160006004838154811061265657612656615191565b60009182526020808320909101546001600160a01b031683528201929092526040019020546126859085615071565b93505b8061269281615058565b9150506125a3565b506000836001600160401b038111156126b5576126b5614c1f565b6040519080825280602002602001820160405280156126ee57816020015b6126db614800565b8152602001906001900390816126d35790505b5090506000805b83811015612abc5760005b6011600087848151811061271657612716615191565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002080549050811015612aa9576011600087848151811061275f5761275f615191565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020818154811061279857612798615191565b90600052602060002090600a020160405180610140016040529081600082015481526020016001820180546127cc9061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546127f89061501e565b80156128455780601f1061281a57610100808354040283529160200191612845565b820191906000526020600020905b81548152906001019060200180831161282857829003601f168201915b5050505050815260200160028201805461285e9061501e565b80601f016020809104026020016040519081016040528092919081815260200182805461288a9061501e565b80156128d75780601f106128ac576101008083540402835291602001916128d7565b820191906000526020600020905b8154815290600101906020018083116128ba57829003601f168201915b505050918352505060038201546001600160a01b0316602082015260048201546040820152600582015460608201526006820154608082015260078201805460a0909201916129259061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546129519061501e565b801561299e5780601f106129735761010080835404028352916020019161299e565b820191906000526020600020905b81548152906001019060200180831161298157829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015612a0057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116129e2575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015612a6257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612a44575b505050505081525050848481518110612a7d57612a7d615191565b60200260200101819052508280612a9390615058565b9350508080612aa190615058565b915050612700565b5080612ab481615058565b9150506126f5565b509095945050505050565b612acf614800565b60005b600554811015612f1e576000612b036000805160206152ff8339815191526005848154811061187557611875615191565b15612b4a576013600060058481548110612b1f57612b1f615191565b60009182526020808320909101546001600160a01b0316835282019290925260400190209050612bd2565b612b6f60008051602061529f8339815191526005848154811061187557611875615191565b15612b8b576011600060058481548110612b1f57612b1f615191565b612bb06000805160206152df8339815191526005848154811061187557611875615191565b15612bcc576012600060058481548110612b1f57612b1f615191565b50612f0c565b60005b8154811015612f095784828281548110612bf157612bf1615191565b90600052602060002090600a02016000015403612ef757818181548110612c1a57612c1a615191565b90600052602060002090600a02016040518061014001604052908160008201548152602001600182018054612c4e9061501e565b80601f0160208091040260200160405190810160405280929190818152602001828054612c7a9061501e565b8015612cc75780601f10612c9c57610100808354040283529160200191612cc7565b820191906000526020600020905b815481529060010190602001808311612caa57829003601f168201915b50505050508152602001600282018054612ce09061501e565b80601f0160208091040260200160405190810160405280929190818152602001828054612d0c9061501e565b8015612d595780601f10612d2e57610100808354040283529160200191612d59565b820191906000526020600020905b815481529060010190602001808311612d3c57829003601f168201915b505050918352505060038201546001600160a01b0316602082015260048201546040820152600582015460608201526006820154608082015260078201805460a090920191612da79061501e565b80601f0160208091040260200160405190810160405280929190818152602001828054612dd39061501e565b8015612e205780601f10612df557610100808354040283529160200191612e20565b820191906000526020600020905b815481529060010190602001808311612e0357829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015612e8257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e64575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015612ee457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612ec6575b5050505050815250509350505050919050565b80612f0181615058565b915050612bd5565b50505b80612f1681615058565b915050612ad2565b5060405162461bcd60e51b815260206004820152600f60248201526e115d995b9d081b9bdd08199bdd5b99608a1b60448201526064016106ca565b6010602052816000526040600020818154811061075557600080fd5b6004546060906000906001600160401b03811115612f9557612f95614c1f565b604051908082528060200260200182016040528015612fbe578160200160208202803683370190505b50905060008060005b6004548110156130be57612ff66000805160206152ff8339815191526004838154811061187557611875615191565b156130ac576004818154811061300e5761300e615191565b9060005260206000200160009054906101000a90046001600160a01b031684848151811061303e5761303e615191565b6001600160a01b03909216602092830291909101909101528261306081615058565b935050601360006004838154811061307a5761307a615191565b60009182526020808320909101546001600160a01b031683528201929092526040019020546130a99083615071565b91505b806130b681615058565b915050612fc7565b506000816001600160401b038111156130d9576130d9614c1f565b60405190808252806020026020018201604052801561311257816020015b6130ff614800565b8152602001906001900390816130f75790505b5090506000805b84811015612abc5760005b6013600088848151811061313a5761313a615191565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020805490508110156134cd576013600088848151811061318357613183615191565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081815481106131bc576131bc615191565b90600052602060002090600a020160405180610140016040529081600082015481526020016001820180546131f09061501e565b80601f016020809104026020016040519081016040528092919081815260200182805461321c9061501e565b80156132695780601f1061323e57610100808354040283529160200191613269565b820191906000526020600020905b81548152906001019060200180831161324c57829003601f168201915b505050505081526020016002820180546132829061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546132ae9061501e565b80156132fb5780601f106132d0576101008083540402835291602001916132fb565b820191906000526020600020905b8154815290600101906020018083116132de57829003601f168201915b505050918352505060038201546001600160a01b0316602082015260048201546040820152600582015460608201526006820154608082015260078201805460a0909201916133499061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546133759061501e565b80156133c25780601f10613397576101008083540402835291602001916133c2565b820191906000526020600020905b8154815290600101906020018083116133a557829003601f168201915b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561342457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613406575b505050505081526020016009820180548060200260200160405190810160405280929190818152602001828054801561348657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613468575b5050505050815250508484815181106134a1576134a1615191565b602002602001018190525082806134b790615058565b93505080806134c590615058565b915050613124565b50806134d881615058565b915050613119565b606060006134ec612f75565b905060006134f8612551565b90506000613504613dde565b905060008151835185516135189190615071565b6135229190615071565b90506000816001600160401b0381111561353e5761353e614c1f565b60405190808252806020026020018201604052801561357757816020015b613564614800565b81526020019060019003908161355c5790505b5090506000805b86518110156135df5786818151811061359957613599615191565b60200260200101518383815181106135b3576135b3615191565b602002602001018190525081806135c990615058565b92505080806135d790615058565b91505061357e565b5060005b8551811015613644578581815181106135fe576135fe615191565b602002602001015183838151811061361857613618615191565b6020026020010181905250818061362e90615058565b925050808061363c90615058565b9150506135e3565b5060005b84518110156136a95784818151811061366357613663615191565b602002602001015183838151811061367d5761367d615191565b6020026020010181905250818061369390615058565b92505080806136a190615058565b915050613648565b50909695505050505050565b6136cd6000805160206152df833981519152336122c0565b6136e95760405162461bcd60e51b81526004016106ca90614fc1565b6137016000805160206152ff83398151915282614521565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600d835294909420835181546001600160a01b0319169316929092178255925180519293919261376592600185019201906148c1565b5050600880549150600061377883615058565b919050555061379560008051602061529f833981519152826122c0565b61382e576137b160008051602061529f83398151915282614521565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600c835294909420835181546001600160a01b0319169316929092178255925180519293919261381592600185019201906148c1565b5050600980549150600061382883615058565b91905055505b6000805b600454811015611c2957826001600160a01b03166004828154811061385957613859615191565b6000918252602090912001546001600160a01b03160361387c5760019150611c29565b8061388681615058565b915050613832565b6138a66000805160206152df833981519152336122c0565b6138c25760405162461bcd60e51b81526004016106ca90614fc1565b6138da6000805160206152df833981519152336122c0565b6138f65760405162461bcd60e51b81526004016106ca90614fc1565b613900828261452b565b6139186000805160206152df833981519152826122c0565b15801561393857506139386000805160206152ff833981519152826122c0565b156117f4576139556000805160206152ff8339815191528261388e565b6001600160a01b0381166000908152600d6020526040812080546001600160a01b03191681559061398960018301826147e2565b5050600880549060006117c683615007565b6012602052816000526040600020818154811061075557600080fd5b6001600160a01b0381166000908152600b60209081526040918290206001810180548451818502810185019095528085526060949293830182828015613a1c57602002820191906000526020600020905b815481526020019060010190808311613a08575b5050505050915050919050565b6060613a4360008051602061529f833981519152836122c0565b613a875760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881a5cc81b9bdd08184819dd595cdd605a1b60448201526064016106ca565b6001600160a01b038216600090815260116020908152604080832080548251818502810185019093528083529193909284015b82821015610c9a57838290600052602060002090600a02016040518061014001604052908160008201548152602001600182018054613af89061501e565b80601f0160208091040260200160405190810160405280929190818152602001828054613b249061501e565b8015613b715780601f10613b4657610100808354040283529160200191613b71565b820191906000526020600020905b815481529060010190602001808311613b5457829003601f168201915b50505050508152602001600282018054613b8a9061501e565b80601f0160208091040260200160405190810160405280929190818152602001828054613bb69061501e565b8015613c035780601f10613bd857610100808354040283529160200191613c03565b820191906000526020600020905b815481529060010190602001808311613be657829003601f168201915b505050918352505060038201546001600160a01b0316602082015260048201546040820152600582015460608201526006820154608082015260078201805460a090920191613c519061501e565b80601f0160208091040260200160405190810160405280929190818152602001828054613c7d9061501e565b8015613cca5780601f10613c9f57610100808354040283529160200191613cca565b820191906000526020600020905b815481529060010190602001808311613cad57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015613d2c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d0e575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015613d8e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d70575b50505050508152505081526020019060010190613aba565b60146020528160005260406000208181548110613dc257600080fd5b6000918252602090912001546001600160a01b03169150829050565b60606000806004805490506001600160401b03811115613e0057613e00614c1f565b604051908082528060200260200182016040528015613e29578160200160208202803683370190505b5090506000805b600454811015613f2757613e5f6000805160206152df8339815191526004838154811061187557611875615191565b15613f155760048181548110613e7757613e77615191565b9060005260206000200160009054906101000a90046001600160a01b0316838381518110613ea757613ea7615191565b6001600160a01b039092166020928302919091019091015281613ec981615058565b9250506012600060048381548110613ee357613ee3615191565b60009182526020808320909101546001600160a01b03168352820192909252604001902054613f129085615071565b93505b80613f1f81615058565b915050613e30565b506000836001600160401b03811115613f4257613f42614c1f565b604051908082528060200260200182016040528015613f7b57816020015b613f68614800565b815260200190600190039081613f605790505b5090506000805b83811015612abc5760005b60126000878481518110613fa357613fa3615191565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020805490508110156143365760126000878481518110613fec57613fec615191565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020818154811061402557614025615191565b90600052602060002090600a020160405180610140016040529081600082015481526020016001820180546140599061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546140859061501e565b80156140d25780601f106140a7576101008083540402835291602001916140d2565b820191906000526020600020905b8154815290600101906020018083116140b557829003601f168201915b505050505081526020016002820180546140eb9061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546141179061501e565b80156141645780601f1061413957610100808354040283529160200191614164565b820191906000526020600020905b81548152906001019060200180831161414757829003601f168201915b505050918352505060038201546001600160a01b0316602082015260048201546040820152600582015460608201526006820154608082015260078201805460a0909201916141b29061501e565b80601f01602080910402602001604051908101604052809291908181526020018280546141de9061501e565b801561422b5780601f106142005761010080835404028352916020019161422b565b820191906000526020600020905b81548152906001019060200180831161420e57829003601f168201915b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561428d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161426f575b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156142ef57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116142d1575b50505050508152505084848151811061430a5761430a615191565b6020026020010181905250828061432090615058565b935050808061432e90615058565b915050613f8d565b508061434181615058565b915050613f82565b6143616000805160206152df833981519152336122c0565b6143a55760405162461bcd60e51b815260206004820152601560248201527421b0b63632b91034b9903737ba10309030b236b4b760591b60448201526064016106ca565b6143bd6000805160206152df833981519152336122c0565b15614498573360009081526013602052604090205481106143f05760405162461bcd60e51b81526004016106ca906151ee565b336000908152601360205260409020805481908390811061441357614413615191565b600091825260208220600a909102018181559061443360018301826148fc565b6144416002830160006148fc565b6003820180546001600160a01b031916905560006004830181905560058301819055600683018190556144789060078401906148fc565b6144866008830160006147e2565b6144946009830160006147e2565b5050505b50565b6144a482610ca6565b6144ad81614547565b6144b78383614551565b505050565b6144c682826122c0565b156117f4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6117f48282614551565b61453482610ca6565b61453d81614547565b6144b783836144bc565b61449881336145d5565b61455b82826122c0565b6117f4576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556145913390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6145df82826122c0565b6117f4576145ec8161462e565b6145f7836020614640565b604051602001614608929190615218565b60408051601f198184030181529082905262461bcd60e51b82526106ca91600401614f41565b60606106906001600160a01b03831660145b6060600061464f836002615287565b61465a906002615071565b6001600160401b0381111561467157614671614c1f565b6040519080825280601f01601f19166020018201604052801561469b576020820181803683370190505b509050600360fc1b816000815181106146b6576146b6615191565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106146e5576146e5615191565b60200101906001600160f81b031916908160001a9053506000614709846002615287565b614714906001615071565b90505b600181111561478c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061474857614748615191565b1a60f81b82828151811061475e5761475e615191565b60200101906001600160f81b031916908160001a90535060049490941c9361478581615007565b9050614717565b5083156147db5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ca565b9392505050565b50805460008255906000526020600020908101906144989190614932565b60405180610140016040528060008152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016060815260200160608152602001606081525090565b8280548282559060005260206000209081019282156148b1579160200282015b828111156148b157825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061487c565b506148bd929150614932565b5090565b8280548282559060005260206000209081019282156148b1579160200282015b828111156148b15782518255916020019190600101906148e1565b5080546149089061501e565b6000825580601f10614918575050565b601f01602090049060005260206000209081019061449891905b5b808211156148bd5760008155600101614933565b60006020828403121561495957600080fd5b81356001600160e01b0319811681146147db57600080fd5b80356001600160a01b0381168114610ca157600080fd5b60006020828403121561499a57600080fd5b6147db82614971565b600080604083850312156149b657600080fd5b6149bf83614971565b946020939093013593505050565b60005b838110156149e85781810151838201526020016149d0565b50506000910152565b60008151808452614a098160208601602086016149cd565b601f01601f19169290920160200192915050565b60006101008a8352806020840152614a378184018b6149f1565b90508281036040840152614a4b818a6149f1565b6001600160a01b03891660608501526080840188905260a0840187905260c0840186905283810360e08501529050614a8381856149f1565b9b9a5050505050505050505050565b600081518084526020808501945080840160005b83811015614acb5781516001600160a01b031687529582019590820190600101614aa6565b509495945050505050565b6000610140825184526020830151816020860152614af6828601826149f1565b91505060408301518482036040860152614b1082826149f1565b9150506060830151614b2d60608601826001600160a01b03169052565b506080830151608085015260a083015160a085015260c083015160c085015260e083015184820360e0860152614b6382826149f1565b9150506101008084015185830382870152614b7e8382614a92565b925050506101208084015185830382870152614b9a8382614a92565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614bf957603f19888603018452614be7858351614ad6565b94509285019290850190600101614bcb565b5092979650505050505050565b600060208284031215614c1857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614c5d57614c5d614c1f565b604052919050565b600082601f830112614c7657600080fd5b81356001600160401b03811115614c8f57614c8f614c1f565b614ca2601f8201601f1916602001614c35565b818152846020838601011115614cb757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112614ce557600080fd5b813560206001600160401b03821115614d0057614d00614c1f565b8160051b614d0f828201614c35565b9283528481018201928281019087851115614d2957600080fd5b83870192505b84831015614d4f57614d4083614971565b82529183019190830190614d2f565b979650505050505050565b60008060008060008060c08789031215614d7357600080fd5b86356001600160401b0380821115614d8a57600080fd5b614d968a838b01614c65565b97506020890135915080821115614dac57600080fd5b614db88a838b01614c65565b965060408901359550606089013594506080890135915080821115614ddc57600080fd5b614de88a838b01614c65565b935060a0890135915080821115614dfe57600080fd5b50614e0b89828a01614cd4565b9150509295509295509295565b60008060408385031215614e2b57600080fd5b82359150614e3b60208401614971565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156136a95783516001600160a01b031683529284019291840191600101614e60565b600080600080600060a08688031215614e9d57600080fd5b8535945060208601356001600160401b0380821115614ebb57600080fd5b614ec789838a01614c65565b955060408801359450606088013593506080880135915080821115614eeb57600080fd5b50614ef888828901614c65565b9150509295509295909350565b600060208284031215614f1757600080fd5b81356001600160401b03811115614f2d57600080fd5b614f3984828501614cd4565b949350505050565b6020815260006147db60208301846149f1565b6020815260006147db6020830184614ad6565b6020808252825182820181905260009190848201906040850190845b818110156136a957835183529284019291840191600101614f83565b60008060408385031215614fb257600080fd5b50508035926020909101359150565b60208082526016908201527521b0b63632b91034b9903737ba1030b71030b236b4b760511b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008161501657615016614ff1565b506000190190565b600181811c9082168061503257607f821691505b60208210810361505257634e487b7160e01b600052602260045260246000fd5b50919050565b60006001820161506a5761506a614ff1565b5060010190565b8082018082111561069057610690614ff1565b601f8211156144b757600081815260208120601f850160051c810160208610156150ab5750805b601f850160051c820191505b818110156150ca578281556001016150b7565b505050505050565b81516001600160401b038111156150eb576150eb614c1f565b6150ff816150f9845461501e565b84615084565b602080601f831160018114615134576000841561511c5750858301515b600019600386901b1c1916600185901b1785556150ca565b600085815260208120601f198616915b8281101561516357888601518255948401946001909101908401615144565b50858210156151815787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b60c0815260006151ba60c08301896149f1565b87602084015286604084015282810360608401526151d881876149f1565b6080840195909552505060a00152949350505050565b60208082526010908201526f125b9d985b1a5908195d995b9d08125160821b604082015260600190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161524a8160178501602088016149cd565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161527b8160288401602088016149cd565b01602801949350505050565b808202811582820484141761069057610690614ff156feb6a185f76b0ff8a0f9708ffce8e6b63ce2df58f28ad66179fb4e230e98d0a52f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19ba49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775829b824e2329e205435d941c9f13baf578548505283d29261236d8e6596d4636a2646970667358221220845126fe3e92f36a2f01aa2ced9b7f12770341cfaf423633ea19c0a89da5bce164736f6c63430008130033a2646970667358221220641cfd1384a6324a162cd4a716f376bb3cc658b178f16033c5259f0c6eb9f06b64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3831,
        "contract": "contracts/CalendarFactory.sol:CalendarFactory",
        "label": "calAddressArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3833,
        "contract": "contracts/CalendarFactory.sol:CalendarFactory",
        "label": "factoryOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3838,
        "contract": "contracts/CalendarFactory.sol:CalendarFactory",
        "label": "calendar",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Calendar)3845_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Calendar)3845_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CalendarFactory.Calendar)",
        "numberOfBytes": "32",
        "value": "t_struct(Calendar)3845_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Calendar)3845_storage": {
        "encoding": "inplace",
        "label": "struct CalendarFactory.Calendar",
        "members": [
          {
            "astId": 3840,
            "contract": "contracts/CalendarFactory.sol:CalendarFactory",
            "label": "calendarOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3842,
            "contract": "contracts/CalendarFactory.sol:CalendarFactory",
            "label": "calendarAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3844,
            "contract": "contracts/CalendarFactory.sol:CalendarFactory",
            "label": "calendarName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}